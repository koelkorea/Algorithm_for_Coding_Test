package code07.Dynamic_Programming;

/*다이나믹 프로그래밍 :   동적 메모리랑 아무 관계 없는 용어지만, 
 *			계산이 이전 계산의 결과를 바탕으로 점화되는 방식일 경우 이를 하나하나 저장하는 배열을 통해 효율과 시간을 잡는방식
 *
 * 바텀-탑(하향적) 방식 : 반복문를 사용한 다이나믹 프로그래밍 방식.. 
 * (=Memoization)	 왜 아래에서 위냐면, 먼저 아랫값들에서 최종값을 향해 전진하는 구조이기 때문 (재귀문 사용) 
 *
 * [적용시 주의사항]
 * 1. (필수) 반드시 근본적으로 수렴하는 값이 정해져야한다(변수가 0 or 1인 경우 상수가 들어간다던가..)
 * 2. (문제가 조건에 따라 갱신되는 구조의 경우 ex 다익스트라 ) 
 *     초기치에 대한 정보가 존재해야 함(초기치가 들어가면 더 크거나 작은값을 찾는 알고리즘이 아니라, 조건문에 최초의 경우 계산이 시작되게 만든다)
 *
 */
public class Example_Bottom_top {

	// 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 배열 초기화
    public static long[] d = new long[100];

    public static void main(String[] args) {
        // 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
        d[1] = 1;
        d[2] = 1;
        int n = 50; // 50번째 피보나치 수를 계산

        // 피보나치 함수(Fibonacci Function) 반복문으로 구현(보텀업 다이나믹 프로그래밍)
        for (int i = 3; i <= n; i++) {
            d[i] = d[i - 1] + d[i - 2];
        }
        System.out.println(d[n]);
    }
    
}
